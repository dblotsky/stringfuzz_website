(set-logic QF_S)
(declare-fun var0 () String)
(assert (str.in.re var0 (re.++ (re.+ (re.* (re.* (re.+ (re.* (re.union (re.union (re.union (re.union (str.to.re "000") (str.to.re "11")) (re.union (str.to.re "22") (str.to.re "33"))) (re.union (re.union (str.to.re "44") (str.to.re "555")) (re.union (str.to.re "666") (str.to.re "7")))) (re.union (re.* (re.union (str.to.re "88") (str.to.re "9"))) (re.* (re.+ (str.to.re "aa")))))))))) (re.* (re.union (re.+ (re.union (re.+ (re.union (re.+ (re.* (re.+ (str.to.re "bbb")))) (re.+ (re.union (re.union (str.to.re "c") (str.to.re "dd")) (re.union (str.to.re "eee") (str.to.re "f")))))) (re.+ (re.+ (re.+ (re.* (re.union (str.to.re "gg") (str.to.re "hhh")))))))) (re.+ (re.union (re.union (re.+ (re.* (re.+ (re.union (str.to.re "i") (str.to.re "j"))))) (re.+ (re.+ (re.+ (re.union (str.to.re "kk") (str.to.re "l")))))) (re.union (re.* (re.* (re.union (re.+ (str.to.re "m")) (re.+ (str.to.re "nnn"))))) (re.* (re.union (re.union (re.+ (str.to.re "ooo")) (re.+ (str.to.re "ppp"))) (re.union (re.+ (str.to.re "q")) (re.+ (str.to.re "r")))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)