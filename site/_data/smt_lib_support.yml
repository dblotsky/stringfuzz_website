-
    name: Strings
    header: [Syntax, Semantics, CVC4, Norn, Z3seq, Z3str3]
    expressions:
        -
            - "String literal"
            - "Printable ASCII characters enclosed in double quotes"
            - yes
            - yes
            - yes
            - yes

        -
            - "String sort"
            - "E.g. in (declare-const X String)"
            - yes
            - yes
            - yes
            - yes
        -
            - "(= s t)"
            - "Equality: String x String -> Bool"
            - yes
            - yes
            - yes
            - yes
        -
            - "(int.to.str i)"
            - "Retrieve string encoding of integer i."
            - yes
            - null
            - yes
            - yes
        -
            - "(str.to.int s)"
            - "Retrieve integer encoded by string s."
            - yes
            - null
            - yes
            - yes
        -
            - "(str.++ a b c)"
            - "Concatenation of one or more strings"
            - yes
            - yes
            - yes
            - yes
        -
            - "(str.at s offset)"
            - "Substring of length 1 at offset in s."
            - yes
            - null
            - yes
            - yes
        -
            - "(str.contains s sub)"
            - "Does s contain the substring sub?"
            - yes
            - null
            - yes
            - yes
        -
            - "(str.indexof s sub offset)"
            - "First position of sub at or after offset in s. Returns -1 otherwise."
            - yes
            - null
            - yes
            - yes
        -
            - "(str.indexof s sub)"
            - "First position of sub in s. Returns -1 otherwise."
            - no
            - no
            - yes
            - yes
        -
            - "(str.len s)"
            - "Length. Returns an integer."
            - yes
            - yes
            - yes
            - yes
        -
            - "(str.prefixof pre s)"
            - "Is pre a prefix of s?"
            - yes
            - null
            - yes
            - yes
        -
            - "(str.replace s src dst)"
            - "Replace the first occurrence of src by dst in s."
            - yes
            - yes
            - yes
            - yes
        -
            - "(str.substr s offset length)"
            - "Retrieves string of s at offset of length length"
            - yes
            - null
            - yes
            - yes
        -
            - "(str.suffixof suf s)"
            - "Is suf a suffix of s?"
            - yes
            - null
            - yes
            - yes
-
    name: Sequences
    header: [Syntax, Semantics, CVC4, Norn, Z3seq, Z3str3]
    expressions:

        -
            - "Seq sort"
            - "E.g. in (declare-const s (Seq Int)) for sequence of integers."
            - null
            - null
            - yes
            - null
        -
            - "(= s t)"
            - "Equality: Seq x Seq -> Bool"
            - null
            - null
            - yes
            - null
        -
            - "(as seq.empty (Seq S))"
            - "The empty sequence with elements of sort S."
            - null
            - null
            - yes
            - null
        -
            - "(seq.unit elem)"
            - "Sequence with a single element elem."
            - null
            - null
            - yes
            - null
        -
            - "(seq.++ a b c)"
            - "Concatenation of one or more sequences"
            - null
            - null
            - yes
            - null
        -
            - "(seq.at s offset)"
            - "Subsequence of length 1 at offset in s."
            - null
            - null
            - yes
            - null
        -
            - "(seq.contains s sub)"
            - "Does s contain the subsequence sub?"
            - null
            - null
            - yes
            - null
        -
            - "(seq.indexof s sub offset)"
            - "First position of sub at or after offset in s. Returns -1 otherwise."
            - null
            - null
            - yes
            - null
        -
            - "(seq.indexof s sub)"
            - "Retrieves first position of sub in s. Returns -1 otherwise."
            - null
            - null
            - yes
            - null
        -
            - "(seq.len s)"
            - "Length. Returns an integer."
            - null
            - null
            - yes
            - null
        -
            - "(seq.replace s src dst)"
            - "Replace the first occurrence of src by dst in s."
            - null
            - null
            - yes
            - null
        -
            - "(seq.extract s offset length)"
            - "Retrieves subsequence of s at offset"
            - null
            - null
            - yes
            - null
        -
            - "(seq.prefixof pre s)"
            - "Is pre a prefix of s?"
            - null
            - null
            - yes
            - null
        -
            - "(seq.suffixof suf s)"
            - "Is suf a suffix of s?"
            - null
            - null
            - yes
            - null
        -
            - "(seq.subseq s sub)"
            - "Does s contain the subsequence sub?"
            - null
            - null
            - null
            - null
        -
            - "(seq.nth s n)"
            - "Subsequence of length 1 at offset in s."
            - null
            - null
            - null
            - null
        -
            - "(seq.cons e s)"
            - "Prepend an element e to s"
            - null
            - null
            - null
            - null
        -
            - "(seq.rev.cons s e)"
            - "Postpend an element e to s"
            - null
            - null
            - null
            - null
        -
            - "(seq.head s)"
            - "First element of s"
            - null
            - null
            - null
            - null
        -
            - "(seq.tail s)"
            - "Tail of s"
            - null
            - null
            - null
            - null
        -
            - "(seq.last s)"
            - "Last element of s"
            - null
            - null
            - null
            - null
        -
            - "(seq.first s)"
            - "All but the last element of s"
            - null
            - null
            - null
            - null
-
    name: Regular Expressions
    header: [Syntax, Semantics, CVC4, Norn, Z3seq, Z3str3]
    expressions:

        -
            - "(str.in.re s r)"
            - "Determine if string s is in the language generated by r."
            - yes
            - yes
            - yes
            - yes
        -
            - "(str.to.re s)"
            - "Convert string to regular expression accepting s."
            - yes
            - yes
            - yes
            - yes
        -
            - "((_ re.loop lo hi) r)"
            - "from lo to hi number of repetitions of r."
            - no
            - no
            - yes
            - no
        -
            - "(as re.all R)"
            - "The regular expression of sort R accepting every sequence."
            - no
            - no
            - yes
            - yes
        -
            - "(as re.allchar R)"
            - "The regular expression of sort R accepting every string."
            - yes
            - no
            - yes
            - yes
        -
            - "(as re.empty R)"
            - "The regular expression R rejecting every sequence."
            - no
            - no
            - yes
            - yes
        -
            - "(as re.nostr R)"
            - "The regular expression of sort R rejecting every string."
            - yes
            - no
            - yes
            - yes
        -
            - "(re.* r)"
            - "Kleene star."
            - yes
            - yes
            - yes
            - yes
        -
            - "(re.+ r)"
            - "Kleene plus."
            - yes
            - no
            - yes
            - yes
        -
            - "(re.++ r1 r2 r3)"
            - "Concatenation of regular expressions."
            - yes
            - yes
            - yes
            - yes
        -
            - "(re.inter r1 r2)"
            - "The intersection of regular languages."
            - yes
            - no
            - yes
            - no
        -
            - "(re.opt r)"
            - "Zero or one use of r."
            - yes
            - no
            - yes
            - yes
        -
            - "(re.range ch1 ch2)"
            - "The range of elements between ch1 and ch2."
            - yes
            - no
            - yes
            - yes
        -
            - "(re.union r1 r2)"
            - "The union of regular languages."
            - yes
            - yes
            - yes
            - yes
        -
            - "(re.complement r)"
            - "Complement language of r"
            - null
            - null
            - null
            - null
        -
            - "(re.of.pred array r)"
            - "Range of predicate; array is an array of booleans"
            - null
            - null
            - null
            - null
        -
            - "(re.difference r1 r2)"
            - "Language that accepts strings that are not accepted by both r1 and r2"
            - null
            - null
            - null
            - null
        -
            - "(seq.in.re s r)"
            - "Determine if sequence s is in the language generated by r."
            - null
            - null
            - yes
            - null
        -
            - "(seq.to.re s)"
            - "Convert sequence to regular expression accepting s."
            - null
            - null
            - yes
            - null
